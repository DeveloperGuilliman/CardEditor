/*
 * Copyright (C) 2020 Developer Guilliman
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.developerguilliman.cardEditor.gui;

import com.developerguilliman.cardEditor.data.CardData;
import com.developerguilliman.cardEditor.output.PdfOutput;
import java.awt.Frame;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;

/**
 *
 * @author DeveloperGuilliman
 */
public class PdfCreateOptionsDialog extends javax.swing.JDialog {

    public static final String[] FONT_NAMES;
    public static final PDFont[] FONT_TYPES;

    static {
        LinkedHashMap<String, PDFont> fonts = new LinkedHashMap<>();
        fonts.put("Courier", PDType1Font.COURIER);
        fonts.put("Courier bold", PDType1Font.COURIER_BOLD);
        fonts.put("Courier italic", PDType1Font.COURIER_OBLIQUE);
        fonts.put("Courier bold italic", PDType1Font.COURIER_BOLD_OBLIQUE);
        fonts.put("Helvetica", PDType1Font.HELVETICA);
        fonts.put("Helvetica bold", PDType1Font.HELVETICA_BOLD);
        fonts.put("Helvetica italic", PDType1Font.HELVETICA_OBLIQUE);
        fonts.put("Helvetica bold italic", PDType1Font.HELVETICA_BOLD_OBLIQUE);
        fonts.put("Times", PDType1Font.TIMES_ROMAN);
        fonts.put("Times bold", PDType1Font.TIMES_BOLD);
        fonts.put("Times italic", PDType1Font.TIMES_ITALIC);
        fonts.put("Times bold italic", PDType1Font.TIMES_BOLD_ITALIC);
        ArrayList<String> names = new ArrayList<>(fonts.size());
        ArrayList<PDFont> types = new ArrayList<>(fonts.size());
        for (Map.Entry<String, PDFont> e : fonts.entrySet()) {
            names.add(e.getKey());
            types.add(e.getValue());
        }
        FONT_NAMES = names.toArray(new String[0]);
        FONT_TYPES = types.toArray(new PDFont[0]);
    }

    private static String getKeyForFont(PDFont font) {

        for (int i = 0; i < FONT_TYPES.length; i++) {
            if (FONT_TYPES[i].equals(font)) {
                return FONT_NAMES[i];
            }
        }
        return null;
    }

    private static PDFont getFontForKey(String font) {

        for (int i = 0; i < FONT_NAMES.length; i++) {
            if (FONT_NAMES[i].equals(font)) {
                return FONT_TYPES[i];
            }
        }
        return null;
    }

    private final File actualFile;
    private final List<List<CardData>> cards;

    /**
     * Creates new form PdfCreateOptionsDialog
     * @param parent
     * @param actualFile
     * @param cards
     */
    public PdfCreateOptionsDialog(java.awt.Frame parent, File actualFile, List<List<CardData>> cards) {
        super(parent, true);
        this.actualFile = actualFile;
        this.cards = cards;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pagePanel = new javax.swing.JPanel();
        cardsPerXLabel = new javax.swing.JLabel();
        cardsPerXSpinner = new javax.swing.JSpinner();
        cardsPerYLabel = new javax.swing.JLabel();
        cardsPerYSpinner = new javax.swing.JSpinner();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        fontsPanel = new javax.swing.JPanel();
        titleFontPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        titlefontSizeSpinner = new javax.swing.JSpinner();
        titleFontTypeCombo = new javax.swing.JComboBox<>();
        nameFontPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        namefontSizeSpinner = new javax.swing.JSpinner();
        nameFontTypeCombo = new javax.swing.JComboBox<>();
        legendFontPanel = new javax.swing.JPanel();
        legendLabel = new javax.swing.JLabel();
        legendfontSizeSpinner = new javax.swing.JSpinner();
        legendFontTypeCombo = new javax.swing.JComboBox<>();
        rulesFontPanel = new javax.swing.JPanel();
        rulesLabel = new javax.swing.JLabel();
        rulesfontSizeSpinner = new javax.swing.JSpinner();
        rulesFontTypeCombo = new javax.swing.JComboBox<>();
        costFontPanel = new javax.swing.JPanel();
        costLabel = new javax.swing.JLabel();
        costfontSizeSpinner = new javax.swing.JSpinner();
        costFontTypeCombo = new javax.swing.JComboBox<>();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        savePanel = new javax.swing.JPanel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        savejButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pagePanel.setLayout(new java.awt.GridLayout(0, 2));

        cardsPerXLabel.setLabelFor(cardsPerXSpinner);
        cardsPerXLabel.setText("Cards X");
        pagePanel.add(cardsPerXLabel);

        cardsPerXSpinner.setValue(3);
        pagePanel.add(cardsPerXSpinner);

        cardsPerYLabel.setLabelFor(cardsPerYSpinner);
        cardsPerYLabel.setText("Cards Y");
        pagePanel.add(cardsPerYLabel);

        cardsPerYSpinner.setValue(3);
        pagePanel.add(cardsPerYSpinner);
        pagePanel.add(filler2);
        pagePanel.add(filler3);

        getContentPane().add(pagePanel, java.awt.BorderLayout.WEST);

        fontsPanel.setLayout(new javax.swing.BoxLayout(fontsPanel, javax.swing.BoxLayout.Y_AXIS));

        titleFontPanel.setLayout(new javax.swing.BoxLayout(titleFontPanel, javax.swing.BoxLayout.X_AXIS));

        titleLabel.setText("Title Font");
        titleFontPanel.add(titleLabel);

        titlefontSizeSpinner.setValue(PdfOutput.DEFAULT_TITLE_FONT_SIZE);
        titleFontPanel.add(titlefontSizeSpinner);

        titleFontTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(FONT_NAMES));
        titleFontTypeCombo.setSelectedItem(getKeyForFont(PdfOutput.DEFAULT_TITLE_FONT_TYPE));
        titleFontPanel.add(titleFontTypeCombo);

        fontsPanel.add(titleFontPanel);

        nameFontPanel.setLayout(new javax.swing.BoxLayout(nameFontPanel, javax.swing.BoxLayout.X_AXIS));

        nameLabel.setText("name Font");
        nameFontPanel.add(nameLabel);

        namefontSizeSpinner.setValue(PdfOutput.DEFAULT_NAME_FONT_SIZE);
        nameFontPanel.add(namefontSizeSpinner);

        nameFontTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(FONT_NAMES));
        nameFontTypeCombo.setSelectedItem(getKeyForFont(PdfOutput.DEFAULT_NAME_FONT_TYPE));
        nameFontPanel.add(nameFontTypeCombo);

        fontsPanel.add(nameFontPanel);

        legendFontPanel.setLayout(new javax.swing.BoxLayout(legendFontPanel, javax.swing.BoxLayout.X_AXIS));

        legendLabel.setText("legend Font");
        legendFontPanel.add(legendLabel);

        legendfontSizeSpinner.setValue(PdfOutput.DEFAULT_LEGEND_FONT_SIZE);
        legendFontPanel.add(legendfontSizeSpinner);

        legendFontTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(FONT_NAMES));
        legendFontTypeCombo.setSelectedItem(getKeyForFont(PdfOutput.DEFAULT_LEGEND_FONT_TYPE));
        legendFontPanel.add(legendFontTypeCombo);

        fontsPanel.add(legendFontPanel);

        rulesFontPanel.setLayout(new javax.swing.BoxLayout(rulesFontPanel, javax.swing.BoxLayout.X_AXIS));

        rulesLabel.setText("rules Font");
        rulesFontPanel.add(rulesLabel);

        rulesfontSizeSpinner.setValue(PdfOutput.DEFAULT_RULES_FONT_SIZE);
        rulesFontPanel.add(rulesfontSizeSpinner);

        rulesFontTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(FONT_NAMES));
        rulesFontTypeCombo.setSelectedItem(getKeyForFont(PdfOutput.DEFAULT_RULES_FONT_TYPE));
        rulesFontPanel.add(rulesFontTypeCombo);

        fontsPanel.add(rulesFontPanel);

        costFontPanel.setLayout(new javax.swing.BoxLayout(costFontPanel, javax.swing.BoxLayout.X_AXIS));

        costLabel.setText("cost Font");
        costFontPanel.add(costLabel);

        costfontSizeSpinner.setValue(PdfOutput.DEFAULT_COST_FONT_SIZE);
        costFontPanel.add(costfontSizeSpinner);

        costFontTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(FONT_NAMES));
        costFontTypeCombo.setSelectedItem(getKeyForFont(PdfOutput.DEFAULT_COST_FONT_TYPE));
        costFontPanel.add(costFontTypeCombo);

        fontsPanel.add(costFontPanel);
        fontsPanel.add(filler1);

        getContentPane().add(fontsPanel, java.awt.BorderLayout.CENTER);

        savePanel.setLayout(new javax.swing.BoxLayout(savePanel, javax.swing.BoxLayout.LINE_AXIS));
        savePanel.add(filler4);

        savejButton.setText("Create PDF");
        savejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savejButtonActionPerformed(evt);
            }
        });
        savePanel.add(savejButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        savePanel.add(cancelButton);

        getContentPane().add(savePanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void savejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savejButtonActionPerformed
        JFileChooser chooser = createPdfFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File file = MainWindow.getChooserSelectedFile(chooser, "pdf");
        Callable<Void> callable = () -> {
            PdfOutput.Builder builder = new PdfOutput.Builder();
            builder.setPerX(((Number) cardsPerXSpinner.getValue()).intValue());
            builder.setPerY(((Number) cardsPerYSpinner.getValue()).intValue());
            builder.setTitleFontSize(((Number) titlefontSizeSpinner.getValue()).floatValue());
            builder.setNameFontSize(((Number) namefontSizeSpinner.getValue()).floatValue());
            builder.setLegendFontSize(((Number) legendfontSizeSpinner.getValue()).floatValue());
            builder.setRulesFontSize(((Number) rulesfontSizeSpinner.getValue()).floatValue());
            builder.setCostFontSize(((Number) costfontSizeSpinner.getValue()).floatValue());
            builder.setTitleFontType(getFontForKey((String) titleFontTypeCombo.getSelectedItem()));
            builder.setNameFontType(getFontForKey((String) nameFontTypeCombo.getSelectedItem()));
            builder.setLegendFontType(getFontForKey((String) legendFontTypeCombo.getSelectedItem()));
            builder.setRulesFontType(getFontForKey((String) rulesFontTypeCombo.getSelectedItem()));
            builder.setCostFontType(getFontForKey((String) costFontTypeCombo.getSelectedItem()));
            PdfOutput output = builder.build();
            output.build(new FileOutputStream(file), cards);
            dispose();
            return null;
        };
        WaitingDialog.show((Frame) getParent(), "Creating pdf...", callable);
    }//GEN-LAST:event_savejButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    public JFileChooser createPdfFileChooser() {

        JFileChooser chooser = new JFileChooser();
        if (actualFile != null) {
            String filename = actualFile.getName();
            int lio = filename.lastIndexOf('.');
            filename = ((lio < 0) ? filename : filename.substring(0, lio)).concat(".pdf");
            File f = new File(actualFile.getParent(), filename);
            chooser.setSelectedFile(f);
        }
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "PDF file", "pdf");
        chooser.setFileFilter(filter);
        return chooser;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel cardsPerXLabel;
    private javax.swing.JSpinner cardsPerXSpinner;
    private javax.swing.JLabel cardsPerYLabel;
    private javax.swing.JSpinner cardsPerYSpinner;
    private javax.swing.JPanel costFontPanel;
    private javax.swing.JComboBox<String> costFontTypeCombo;
    private javax.swing.JLabel costLabel;
    private javax.swing.JSpinner costfontSizeSpinner;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.JPanel fontsPanel;
    private javax.swing.JPanel legendFontPanel;
    private javax.swing.JComboBox<String> legendFontTypeCombo;
    private javax.swing.JLabel legendLabel;
    private javax.swing.JSpinner legendfontSizeSpinner;
    private javax.swing.JPanel nameFontPanel;
    private javax.swing.JComboBox<String> nameFontTypeCombo;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JSpinner namefontSizeSpinner;
    private javax.swing.JPanel pagePanel;
    private javax.swing.JPanel rulesFontPanel;
    private javax.swing.JComboBox<String> rulesFontTypeCombo;
    private javax.swing.JLabel rulesLabel;
    private javax.swing.JSpinner rulesfontSizeSpinner;
    private javax.swing.JPanel savePanel;
    private javax.swing.JButton savejButton;
    private javax.swing.JPanel titleFontPanel;
    private javax.swing.JComboBox<String> titleFontTypeCombo;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JSpinner titlefontSizeSpinner;
    // End of variables declaration//GEN-END:variables
}
