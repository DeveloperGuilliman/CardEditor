/*
 * Copyright (C) 2020 Developer Guilliman <developerguilliman@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.developerguilliman.cardEditor.gui;

import java.awt.Frame;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.concurrent.Callable;

import javax.swing.JOptionPane;

import com.developerguilliman.cardEditor.csv.WahapediaCsvBuilder;
import com.developerguilliman.cardEditor.csv.WahapediaCsvFactions;
import com.developerguilliman.cardEditor.data.CardCollectionData;
import com.developerguilliman.cardEditor.data.Faction;
import com.developerguilliman.cardEditor.input.WahapediaAbilities;
import com.developerguilliman.cardEditor.input.WahapediaMiscCardBuilder;
import com.developerguilliman.cardEditor.input.WahapediaPsychicPowers;
import com.developerguilliman.cardEditor.input.WahapediaStratagems;
import com.developerguilliman.cardEditor.input.WahapediaWarlordTraits;

/**
*
* @author Developer Guilliman <developerguilliman@gmail.com>
*/
public class WahapediaFactions extends javax.swing.JDialog {


	private LinkedHashMap<String, Faction> factions;
	
    /**
     * Creates new form WahapediaFactions
     * @param parent
     */
	public WahapediaFactions(MainWindow parent) {
		super(parent, true);
		initComponents();
		java.awt.EventQueue.invokeLater(() -> {
			updateFactions();
		});
	}

	public void updateFactions() {
		Callable<List<String>> callable = new Callable<List<String>>() {

			@Override
			public List<String> call() throws Exception {
				factions = new  WahapediaCsvFactions().build(WahapediaCsvFactions.getInputStreamFromUrl()).getData();
				String[] factionNames = new String[factions.size()];
				int i = 0;
				for (Faction f : factions.values()) {
					factionNames[i++] = f.getName();
				}
				factionList.setListData(factionNames);
				return null;
			}
		};
		WaitingDialog.show((Frame) getParent(), "Loading factions...", callable);
	}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsPanel = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jPanel1 = new javax.swing.JPanel();
        selectedCardsLabel = new javax.swing.JLabel();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        dataPanel = new javax.swing.JPanel();
        stratagemCheckBox = new javax.swing.JCheckBox();
        psychicPowersCheckBox = new javax.swing.JCheckBox();
        warlordTraitsCheckBox = new javax.swing.JCheckBox();
        factionAbilitiesCheckBox = new javax.swing.JCheckBox();
        miscCheckBox = new javax.swing.JCheckBox();
        factionScrollPane = new javax.swing.JScrollPane();
        factionList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 480));
        setModal(true);

        buttonsPanel.setLayout(new javax.swing.BoxLayout(buttonsPanel, javax.swing.BoxLayout.LINE_AXIS));
        buttonsPanel.add(filler1);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 2, 0, 2));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(selectedCardsLabel);

        buttonsPanel.add(jPanel1);

        importButton.setText("Import selected");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(importButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(cancelButton);

        getContentPane().add(buttonsPanel, java.awt.BorderLayout.SOUTH);

        dataPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        dataPanel.setLayout(new java.awt.GridLayout(0, 1));

        stratagemCheckBox.setText("Stratagems");
        dataPanel.add(stratagemCheckBox);

        psychicPowersCheckBox.setText("Psychic Powers");
        dataPanel.add(psychicPowersCheckBox);

        warlordTraitsCheckBox.setText("Warlord Traits");
        dataPanel.add(warlordTraitsCheckBox);

        factionAbilitiesCheckBox.setText("Faction Abilities");
        dataPanel.add(factionAbilitiesCheckBox);

        miscCheckBox.setText("Misc");
        dataPanel.add(miscCheckBox);

        getContentPane().add(dataPanel, java.awt.BorderLayout.EAST);

        factionScrollPane.setPreferredSize(new java.awt.Dimension(300, 352));
        factionScrollPane.setViewportView(factionList);

        getContentPane().add(factionScrollPane, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 706, 478);
    }// </editor-fold>//GEN-END:initComponents

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed

    	boolean stratagems = stratagemCheckBox.isSelected();
    	boolean psychicPowers = psychicPowersCheckBox.isSelected();
    	boolean warlordTraits = warlordTraitsCheckBox.isSelected();
    	boolean factionAbilities = factionAbilitiesCheckBox.isSelected();
    	boolean misc = miscCheckBox.isSelected();
    	
		if (!stratagems && !psychicPowers && !warlordTraits && !factionAbilities && !misc) {
            JOptionPane.showMessageDialog(this, "No option selected", "Error", JOptionPane.ERROR_MESSAGE);    		
            return;
    	}
    	
      MainWindow mainWindow = (MainWindow) getParent();
    	
        LinkedHashMap<String, Faction> selectedFactions = getSelectedFactions();

        Callable<List<String>> callable = () -> {
            CardCollectionData newCards = new CardCollectionData();

            if (stratagems) {
                newCards.addAll(new WahapediaStratagems(selectedFactions).build(WahapediaStratagems.getInputStreamFromUrl()));
            }
            if (psychicPowers) {
                newCards.addAll(new WahapediaPsychicPowers(selectedFactions).build(WahapediaPsychicPowers.getInputStreamFromUrl()));
            }
            if (warlordTraits) {
                newCards.addAll(new WahapediaWarlordTraits(selectedFactions).build(WahapediaWarlordTraits.getInputStreamFromUrl()));
            }
            if (factionAbilities) {
                newCards.addAll(new WahapediaAbilities(selectedFactions).build(WahapediaAbilities.getInputStreamFromUrl()));
            }
            if (misc) {
            	for (Faction faction: selectedFactions.values()) {
                    newCards.addAll(new WahapediaMiscCardBuilder(1, false, false).build(WahapediaCsvBuilder.getInputStreamFromUrl(faction.getLink().concat("/"))));
            	}
            }
            new CardImportDialog(mainWindow, newCards).setVisible(true);
            dispose();
            return null;
        };
        WaitingDialog.show(mainWindow, "Loading...", callable);
    }//GEN-LAST:event_importButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JCheckBox factionAbilitiesCheckBox;
    private javax.swing.JList<String> factionList;
    private javax.swing.JScrollPane factionScrollPane;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton importButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox miscCheckBox;
    private javax.swing.JCheckBox psychicPowersCheckBox;
    private javax.swing.JLabel selectedCardsLabel;
    private javax.swing.JCheckBox stratagemCheckBox;
    private javax.swing.JCheckBox warlordTraitsCheckBox;
    // End of variables declaration//GEN-END:variables

    private LinkedHashMap<String, Faction> getSelectedFactions() {
    	LinkedHashMap<String, Faction> selected = new LinkedHashMap<>();
    	int[] selectedIndices = factionList.getSelectedIndices();
    	int i =0;
    	for (Faction faction: factions.values()) {
    		for (int index : selectedIndices) {
    			if (index == i) {
    				selected.put(faction.getId(), faction);
    				break;
    			}
    		}
    		i++;
    	}
        return selected;
    }
}
